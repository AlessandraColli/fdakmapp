# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
center_method <- "medoid"
center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
# center_method <- "mean"
# center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(4,1) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, ypat, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
yf<-res$y
yf[which(lr[pat]=="L"),,1]<- -res$y[which(lr[pat]=="L"),,1]
table(res$labels,lr[pat])
n_clust <-10
# select seeds (random if null)
set.seed(1)
seeds<-sample(1:nrow(ypat),n_clust)
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
center_method <- "medoid"
center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
# center_method <- "mean"
# center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(4,1) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, ypat, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
yf<-res$y
yf[which(lr[pat]=="L"),,1]<- -res$y[which(lr[pat]=="L"),,1]
table(res$labels,lr[pat])
n_clust <-20
# select seeds (random if null)
set.seed(1)
seeds<-sample(1:nrow(ypat),n_clust)
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
center_method <- "medoid"
center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
# center_method <- "mean"
# center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(4,1) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, ypat, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
yf<-res$y
yf[which(lr[pat]=="L"),,1]<- -res$y[which(lr[pat]=="L"),,1]
table(res$labels,lr[pat])
n_clust <-30
# select seeds (random if null)
set.seed(1)
seeds<-sample(1:nrow(ypat),n_clust)
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
center_method <- "medoid"
center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
# center_method <- "mean"
# center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(4,1) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, ypat, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
yf<-res$y
yf[which(lr[pat]=="L"),,1]<- -res$y[which(lr[pat]=="L"),,1]
table(res$labels,lr[pat])
n_clust <-40
# select seeds (random if null)
set.seed(1)
seeds<-sample(1:nrow(ypat),n_clust)
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
center_method <- "medoid"
center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
# center_method <- "mean"
# center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(4,1) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, ypat, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
yf<-res$y
yf[which(lr[pat]=="L"),,1]<- -res$y[which(lr[pat]=="L"),,1]
table(res$labels,lr[pat])
# # #aneurisk data
n_clust <-50
# select seeds (random if null)
set.seed(1)
seeds<-sample(1:nrow(ypat),n_clust)
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
center_method <- "medoid"
center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
# center_method <- "mean"
# center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(4,1) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, ypat, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
yf<-res$y
yf[which(lr[pat]=="L"),,1]<- -res$y[which(lr[pat]=="L"),,1]
table(res$labels,lr[pat])
#library(rgl)
open3d()
for(i in 1:nrow(res$y)){
print(i)
lines3d(yf[i,,],col=res$labels[i])
}
100000^2
2^31
100000^2
2^31 -10^10
2^31 -100000^2
2^31 - 50000^2
2^31 - 30000^2
2^31 - 40000^2
2^31 - 50000^2
2^31 - 45000^2
sqrt(2^31-1)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
library(fdakmapp)
# # #aneurisk data
x<-aneurisk65$x
y<-aneurisk65$y
n_clust <-5
# select seeds (random if null)
seeds<-NULL
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
# center_method <- "medoid"
# center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
center_method <- "mean"
center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2w"
optim_method <- "bobyqa"
similarity_method <- "l2first"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(1,0) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
kmap_show_results(res,FALSE)
kmap_show_results(res,FALSE)
n_clust <-2
# select seeds (random if null)
seeds<-NULL
#seeds<-res$seeds
############# Choose warping method: #################
# warping_method <- "affine"
# warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
warping_method <- "noalign"
warping_opt<-as.numeric()
############# Choose center method: #########
# center_method <- "medoid"
# center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
center_method <- "mean"
center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2first"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(1,0) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
warping_method <- "affine"
warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
library(fdakmapp)
library(fdakmapp)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
similarity_method <- "l2"
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
getwd()
library(fdakmapp)
############# EXE ##########################
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2)
############# OUTPUT################
kmap_show_results(res,TRUE)
############# EXE ##########################
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2)
############# OUTPUT################
kmap_show_results(res)
############# EXE ##########################
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2)
############# OUTPUT################
kmap_show_results(res)
res$seeds
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2,seeds=c(32,64))
############# OUTPUT################
kmap_show_results(res)
######### create documentation
pack <- "fdakmapp"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(fdakmapp)
system("rm fdakmapp.pdf")
pack <- "fdakmapp"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2,seeds=c(32))
library(fdakmapp)
system("rm fdakmapp.pdf")
pack <- "fdakmapp"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(fdakmapp)
system("rm fdakmapp.pdf")
pack <- "fdakmapp"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(fdakmapp)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
x<-aneurisk65$x
y<-aneurisk65$y
n_clust <-2
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res,FALSE)
library(fdakmapp)
# # #aneurisk data
x<-aneurisk65$x
y<-aneurisk65$y
n_clust <-2
# select seeds (random if null)
seeds<-NULL
#seeds<-res$seeds
############# Choose warping method: #################
warping_method <- "affine"
warping_opt<-c(0.15,0.15) # c(max_dilation,max_shift)
# warping_method <- "dilation"
# warping_opt<-c(0.15) # c(max_dilation)
#
# warping_method <- "shift"
# warping_opt<-c(0.15) # c(max_shift)
#
# warping_method <- "noalign"
# warping_opt<-as.numeric()
############# Choose center method: #########
# center_method <- "medoid"
# center_opt <- as.numeric()
# center_method <- "pseudomedoid"
# center_opt <- as.numeric()
#
center_method <- "mean"
center_opt <- c(0.01,0.1) # c(span,delta)
############ Choose similarity and optim: #############
similarity_method <- "l2"
optim_method <- "bobyqa"
############ Output_options
out_opt<- c(100 , 0.001 , 100) #c(n_out , tollerance, max_iteration)
fence <- FALSE
check_total_similarity <- TRUE
com_oc<-FALSE
show_iter <- TRUE
par_opt<-c(1,0) ## c(num_threads, kind of parallelization)
############# EXE ##########################
res<-kmap(  x, y, seeds, n_clust,
warping_method, center_method, similarity_method, optim_method,
warping_opt, center_opt, out_opt,
fence, check_total_similarity, show_iter,com_oc,par_opt)
############# OUTPUT################
kmap_show_results(res)
kmap_show_results(res,TRUE)
kmap_show_results(res,TRUE,TRUE)
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2,seeds=c(32,64))
############# OUTPUT################
kmap_show_results(res)
kmap_show_results(res,FALSE,TRUE)
res<-kmap(x=aneurisk65$x, y=aneurisk65$y, n_clust=2,seeds=c(32,64),comp_original_center = TRUE)
kmap_show_results(res,FALSE,TRUE)
kmap_show_results(res,TRUE,TRUE)
library(fdakmapp)
system("rm fdakmapp.pdf")
pack <- "fdakmapp"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(fdakmapp)
